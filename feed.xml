<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://jehuamanna.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://jehuamanna.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-08T12:26:53+00:00</updated><id>https://jehuamanna.com/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">The Dance Of JavaScript In the Browser</title><link href="https://jehuamanna.com/blog/2025/the-dance-of-javascript-inside-the-browser/" rel="alternate" type="text/html" title="The Dance Of JavaScript In the Browser"/><published>2025-09-04T15:09:00+00:00</published><updated>2025-09-04T15:09:00+00:00</updated><id>https://jehuamanna.com/blog/2025/the-dance-of-javascript-inside-the-browser</id><content type="html" xml:base="https://jehuamanna.com/blog/2025/the-dance-of-javascript-inside-the-browser/"><![CDATA[<p><a href="#orgb7e72e9">High-level concepts you must understand.</a></p> <ul> <li><a href="#orgdbe27ed">Useful patterns &amp; examples</a></li> <li><a href="#org569495d">Common pitfalls &amp; gotchas</a></li> <li><a href="#org1fc2abd">Testing &amp; determinism</a></li> <li><a href="#orgb59fe3e">Performance &amp; battery considerations</a></li> </ul> <p><a id="orgb7e72e9"></a></p> <h1 id="high-level-concepts-you-must-understand">High-level concepts you must understand.</h1> <ol> <li><strong>Event loop phases / task queues</strong> <ul> <li>While the event loop itself isn’t directly DOM-related, many tasks scheduled by the event loop can be. For instance: <ul> <li>*Microtask(like <code class="language-plaintext highlighter-rouge">.then</code> of a <code class="language-plaintext highlighter-rouge">Promise</code>) can modify the DOM (e.g., updating elements one a <code class="language-plaintext highlighter-rouge">Promise</code> resolves).</li> <li><strong>Macrotasks</strong> (like <code class="language-plaintext highlighter-rouge">setTimeout</code>, <code class="language-plaintext highlighter-rouge">setInterval</code>, or <code class="language-plaintext highlighter-rouge">requestAnimationFrame</code>) can also interact with the DOM by manipulating elements, triggering events, or performing layout/repaint tasks.</li> <li><code class="language-plaintext highlighter-rouge">setTimeout</code> / <code class="language-plaintext highlighter-rouge">setInterval</code> callbacks are scheduled on the <em>macrotask</em> (task) queue (in browsers the “timer” phase). Microtasks (Promises <code class="language-plaintext highlighter-rouge">.then</code>, <code class="language-plaintext highlighter-rouge">queueMicrotask</code>) run before macrotasks that follow the currently executing code.</li> <li>Consequence: resloving a promise can run before a <code class="language-plaintext highlighter-rouge">setTimeout(..., 0)</code> handler.</li> </ul> </li> </ul> </li> <li><strong>Zero-delay is not immediate</strong> <ul> <li><code class="language-plaintext highlighter-rouge">setTimeout(fn, 0)</code> schedules <code class="language-plaintext highlighter-rouge">fn</code> to run after current code and any queued microtasks - it is <em>yielding</em> control, not instantaneously.</li> </ul> </li> <li><strong>setTimeout / setInterval Callbacks</strong>: <ul> <li>These are typically used for scheduling DOM updates, such as animations or polling for state changes, so <strong>they are often DOM-related</strong> when used in client-side JavaScript.</li> <li>For example, you might use <code class="language-plaintext highlighter-rouge">setTimeout</code> to delay DOM updates after a certain action, or <code class="language-plaintext highlighter-rouge">setInterval</code> to repeatedly update an element at a fixed interval.</li> </ul> </li> <li><strong>Clamping and throttling</strong> <ul> <li>These can impact the <strong>performance of DOM updates</strong>. If your’re using high-frequency timers to update the DOM, browsers may throttle them when tabs are inactive or when there are too many nested timers. This is particularly important in <strong>animations or continous DOM updates</strong>.</li> <li>Browsers clamp nested timers or timers in background/inactive tabs. Historically nested timeouts &lt; 4ms get clamped to 4ms; background tabs may be throttled to ~100ms or more. Node has different rules.</li> </ul> </li> <li><strong>Accuracy and Drift</strong> <ul> <li>Timers that drift can cause issues with <strong>timing-sensitive DOM updates</strong> (like animations or periodic UI updates). For example, if you rely on <code class="language-plaintext highlighter-rouge">setInterval</code> to update an animation, any drift can result in visible <strong>jank</strong> or inconsistent behavior in the UI.</li> </ul> </li> <li><strong>Timers and Async Functions</strong> <ul> <li> <p>If you pass asn <strong>async function</strong> to a <code class="language-plaintext highlighter-rouge">setInterval</code> or <code class="language-plaintext highlighter-rouge">setTimeout</code>, it won’t behave as expected, since the function will run asynchronously. This could lead to race conditions or unexpected behavior when manipulating the DOM.</p> <p>For example, if the async function updates the DOM, it could result in multiple concurrent updates that might not be desirable.</p> </li> </ul> </li> <li><strong>Memory Leaks and Closures</strong> <ul> <li>This is very relevant for DOM manipulation, as closures (functions referencing DOM nodes) can <strong>prevent garbage collection</strong> if not cleared properly. If you don’t clear your timers (especially if they are tired to DOM elements), you might create memory leaks that <strong>accumulate over time</strong> as the DOM grows.</li> </ul> </li> <li><strong>Security / DoS / Throttlingh</strong> <ul> <li>While not directly manipulating the DOM, this is relevant to <strong>DOM performance</strong>. Excessive timers can <strong>throttle DOM updates</strong> or cause a page to become unresponsive ( leading to <strong>poor user experience</strong> ). For instance, long-running intervals or timeouts that update the DOM can overwhelm the browser’s rendering enginer,, causing frames to drop or UI freezes.</li> </ul> </li> </ol> <p><a id="orgdbe27ed"></a></p> <h1 id="useful-patterns--examples">Useful patterns &amp; examples</h1> <ol> <li> <p>Promise sleep / <code class="language-plaintext highlighter-rouge">await</code> friendly</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="kd">function</span> <span class="nf">sleep</span><span class="p">(</span><span class="nx">ms</span><span class="p">,</span> <span class="p">{</span><span class="nx">signal</span><span class="p">}</span> <span class="o">=</span> <span class="p">{}){</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">signal</span><span class="p">?.</span><span class="nx">aborted</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">reject</span><span class="p">(</span><span class="k">new</span> <span class="nc">DOMException</span><span class="p">(</span><span class="dl">'</span><span class="s1">Aborted</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">AbortError</span><span class="dl">'</span><span class="p">));</span>
                <span class="p">}</span>
                <span class="kd">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="nx">signal</span><span class="p">?.</span><span class="nf">removeEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">abort</span><span class="dl">'</span><span class="p">,</span> <span class="nx">onAbort</span><span class="p">);</span>
                    <span class="nf">resolve</span><span class="p">();</span>
                <span class="p">},</span> <span class="nx">ms</span><span class="p">);</span>
                <span class="kd">function</span> <span class="nf">onAbort</span><span class="p">()</span> <span class="p">{</span>
                    <span class="nf">clearTimeout</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
                    <span class="nf">reject</span><span class="p">(</span><span class="k">new</span> <span class="nc">DOMExecption</span><span class="p">(</span><span class="dl">'</span><span class="s1">Aborted</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">AbortError</span><span class="dl">'</span><span class="p">));</span>
                <span class="p">}</span>
                <span class="nx">signal</span><span class="p">?.</span><span class="nf">addEventListenter</span><span class="p">(</span><span class="dl">'</span><span class="s1">abort</span><span class="dl">'</span><span class="p">,</span> <span class="nx">onAbort</span><span class="p">,</span> <span class="p">{</span><span class="na">once</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
            <span class="p">});</span>
        <span class="p">}</span>
</code></pre></div> </div> <p>This is better than ad-hoc setTimeouts when you use <code class="language-plaintext highlighter-rouge">async/await</code> and want cancellation support.</p> </li> <li> <p>Accurate interval (drift-compensated)</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">startAccurateInterval</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">interval</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">expected</span> <span class="o">=</span> <span class="nx">performance</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">+</span> <span class="nx">interval</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">stopped</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    
    <span class="kd">function</span> <span class="nf">tick</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">stopped</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nf">fn</span><span class="p">();</span>
        <span class="nx">expected</span> <span class="o">+=</span> <span class="nx">interval</span><span class="p">;</span>
        <span class="kd">const</span> <span class="nx">next</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">interval</span> <span class="o">-</span> <span class="nx">drift</span><span class="p">);</span>
        <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">tick</span><span class="p">,</span> <span class="nx">next</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">teck</span><span class="p">,</span> <span class="nx">interval</span><span class="p">);</span>
    
    <span class="k">return </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">stopped</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">};</span>
<span class="p">}</span>
<span class="c1">//usage</span>
<span class="kd">const</span> <span class="nx">stop</span> <span class="o">=</span> <span class="nf">startAccurateInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">tick</span><span class="dl">'</span><span class="p">,</span> <span class="nx">performance</span><span class="p">.</span><span class="nf">now</span><span class="p">()),</span> <span class="mi">1000</span><span class="p">);</span>
<span class="c1">// stop() to cancel</span>
</code></pre></div> </div> <p>This corrects for drift caused by callback execution time.</p> </li> <li> <p>Avoid overlapping <code class="language-plaintext highlighter-rouge">async</code> interval run</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">let</span> <span class="nx">running</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
   <span class="kd">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nf">setInterval</span><span class="p">(</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
       <span class="k">if </span><span class="p">(</span><span class="nx">running</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
       <span class="nx">running</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
       <span class="k">try</span> <span class="p">{</span>
           <span class="k">await</span> <span class="nf">doSomethingAsync</span><span class="p">();</span>
       <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
           <span class="nx">running</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
       <span class="p">}</span>
   <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>
</code></pre></div> </div> <p>Or use recursive <code class="language-plaintext highlighter-rouge">setTimeout</code> to enforce sequential runs.</p> </li> <li> <p>Exponential backoff + jitter (for retries)</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">function</span> <span class="nf">backoff</span><span class="p">(</span><span class="nx">attemp</span><span class="p">,</span> <span class="nx">base</span> <span class="o">=</span> <span class="mi">200</span><span class="p">,</span> <span class="nx">cap</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">){</span>
       <span class="kd">const</span> <span class="nx">exp</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">min</span><span class="p">(</span><span class="nx">cp</span><span class="p">,</span> <span class="nx">base</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">**</span> <span class="nx">attemp</span><span class="p">));</span>
       <span class="c1">// add jitter</span>
       <span class="k">return</span> <span class="nx">exp</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="nx">exp</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
   <span class="p">}</span>
</code></pre></div> </div> <p>Use <code class="language-plaintext highlighter-rouge">setTimeout</code> with the returned ms. Jittering avoids thundering herd.</p> </li> <li> <p>Cancelable timers with AbortController</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">setTimeoutWithSignal</span><span class="p">(</span><span class="nx">cb</span><span class="p">,</span> <span class="nx">ms</span><span class="p">,</span> <span class="nx">signal</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">signal</span><span class="p">?.</span><span class="nf">removeEvenListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">abort</span><span class="dl">'</span><span class="p">,</span> <span class="nx">onAbort</span><span class="p">);</span>
        <span class="nf">cb</span><span class="p">();</span>
    <span class="p">},</span><span class="nx">ms</span><span class="p">)</span>
    <span class="kd">function</span> <span class="nf">onAbort</span><span class="p">(){</span>
        <span class="nf">clearTimeout</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">signal</span><span class="p">?.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">abort</span><span class="dl">'</span><span class="p">,</span> <span class="nx">onAbort</span><span class="p">,</span> <span class="p">{</span><span class="na">once</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
    <span class="k">return</span> <span class="nx">id</span><span class="p">;</span>
<span class="p">}</span>
    
<span class="kd">const</span> <span class="nx">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AbortController</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">setTimeoutWithSignal</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">done</span><span class="dl">'</span><span class="p">),</span> <span class="mi">5000</span><span class="p">,</span> <span class="nx">ac</span><span class="p">.</span><span class="nx">signal</span><span class="p">);</span>
    <span class="nx">ac</span><span class="p">.</span><span class="nf">abort</span><span class="p">();</span> <span class="c1">// cancels</span>
<span class="p">}</span>
</code></pre></div> </div> </li> <li>Use <code class="language-plaintext highlighter-rouge">requestAnimationFrame</code> for animations. <ul> <li><code class="language-plaintext highlighter-rouge">requestAnimationFrame</code> is synchronized with display refresh rate and pauses in background tabs - use it instead of <code class="language-plaintext highlighter-rouge">setInterval</code> for visual updates.</li> </ul> </li> <li> <p>Yiedling to the event loop (cooperative blocking) If you must do heavy sychronous work but want to keep UI responsive, break it into slices:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">bigWork</span><span class="p">(</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">process</span><span class="p">(</span><span class="nx">items</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">===</span> <span class="mi">0</span><span class="p">){</span>
            <span class="k">await</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nx">r</span> <span class="o">=&gt;</span> <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span> <span class="c1">// yield</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> </div> </li> </ol> <p><a id="org569495d"></a></p> <h1 id="common-pitfalls--gotchas">Common pitfalls &amp; gotchas</h1> <ul> <li><strong>Relying on exact timing</strong> - browsers and OSes will vary. Never assume millisecond-perfect scheduling for non-real-time tasks.</li> <li><strong>setInterval + long task overlap</strong> - causes multiple simultaneous executions; use locking or recursive scheduling.</li> <li><strong>Timers keep objects alive</strong> - forgettiing to clear timers tied to DOM nodes leads to leaks.</li> <li><strong>Using <code class="language-plaintext highlighter-rouge">setInterval</code> for animations</strong> - leads to frame-skip/jitter; prefer <code class="language-plaintext highlighter-rouge">requestAnimationFrame</code>.</li> <li><strong>Nested setTimeout clamping</strong> - repeatedly calling ~setTimeout(…, 0) inside handlers can get clamped to a minimum delay.</li> <li><strong>In tests</strong> - use fake timers(Jest, Sinon) for deterministic behavior. Be aware fake timers change how <code class="language-plaintext highlighter-rouge">Date.now()</code> and <code class="language-plaintext highlighter-rouge">performance.now()</code> behave in some libs.</li> </ul> <p><a id="org1fc2abd"></a></p> <h1 id="testing--determinism">Testing &amp; determinism</h1> <ul> <li>Use Sinon or Jest fake timers to: <ul> <li>Advance time deterministically.</li> <li>Test backoff and retry logic.</li> <li>Avoid flakiness in asynchronours tests.</li> </ul> </li> <li>But beware: some APIs (like <code class="language-plaintext highlighter-rouge">requestAnimationFrame</code>, or high-res <code class="language-plaintext highlighter-rouge">performace.now()</code>) need additional shims or cannot be faked the same way.</li> </ul> <p><a id="orgb59fe3e"></a></p> <h1 id="performance--battery-considerations">Performance &amp; battery considerations</h1> <ul> <li>Avoid frequent timers on background tabs; check <code class="language-plaintext highlighter-rouge">document.visibilityState</code> and pause timers when hidden.</li> <li>For background processing use Web Workers or Service Workers where appropriate (and the browser allows longer lifecycle).</li> </ul>]]></content><author><name></name></author><category term="frontend"/><category term="javascript"/><category term="dom"/><category term="performace"/><category term="eventloop"/><summary type="html"><![CDATA[Usage of JavaScript in real world applications.]]></summary></entry></feed>